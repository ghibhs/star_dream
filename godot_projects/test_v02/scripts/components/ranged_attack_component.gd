# ranged_attack_component.gd
extends Node2D
class_name RangedAttackComponent

## Componente especializado para ataques ranged/projectile
## Gerencia disparo de proj√©teis

signal projectile_fired(projectile: Node2D)
signal attack_failed(reason: String)

@export var projectile_scene: PackedScene
@export var spawn_marker: Marker2D
@export var weapon_data: Resource  # WeaponData

var is_firing: bool = false


func _ready() -> void:
	# Carrega cena padr√£o de proj√©til se n√£o configurada
	if not projectile_scene:
		projectile_scene = preload("res://scenes/projectiles/projectile.tscn")


func execute_attack(target_position: Vector2) -> void:
	"""Dispara um proj√©til em dire√ß√£o ao alvo"""
	if is_firing:
		print("[RANGED] ‚ö†Ô∏è J√° est√° disparando, ignorando")
		return
	
	if not validate_attack():
		return
	
	is_firing = true
	
	print("[RANGED] üèπ Disparando proj√©til...")
	
	# Calcula dire√ß√£o
	var spawn_pos = get_spawn_position()
	var direction = (target_position - spawn_pos).normalized()
	
	# Cria proj√©til
	var projectile = create_projectile(spawn_pos, direction)
	
	if projectile:
		print("[RANGED]    ‚úÖ Proj√©til disparado")
		emit_signal("projectile_fired", projectile)
	else:
		print("[RANGED]    ‚ùå Falha ao criar proj√©til")
		emit_signal("attack_failed", "Falha ao instanciar proj√©til")
	
	is_firing = false


func validate_attack() -> bool:
	"""Valida se o ataque pode ser executado"""
	if not projectile_scene:
		push_error("[RANGED] ‚ùå Projectile scene n√£o configurada!")
		emit_signal("attack_failed", "Scene n√£o configurada")
		return false
	
	if not spawn_marker:
		push_error("[RANGED] ‚ùå Spawn marker n√£o configurado!")
		emit_signal("attack_failed", "Spawn marker n√£o encontrado")
		return false
	
	if not weapon_data:
		push_error("[RANGED] ‚ùå WeaponData n√£o configurado!")
		emit_signal("attack_failed", "WeaponData ausente")
		return false
	
	return true


func create_projectile(spawn_pos: Vector2, direction: Vector2) -> Node2D:
	"""Cria e configura um proj√©til"""
	var projectile = projectile_scene.instantiate()
	
	if not projectile:
		push_error("[RANGED] ‚ùå Falha ao instanciar proj√©til!")
		return null
	
	# Posiciona o proj√©til
	projectile.global_position = spawn_pos
	
	# Adiciona √† cena
	get_tree().current_scene.add_child(projectile)
	
	print("[RANGED]    üìç Spawn: %s" % spawn_pos)
	print("[RANGED]    ‚û°Ô∏è Dire√ß√£o: %s" % direction)
	
	# Configura proj√©til (deferred para garantir que _ready rode primeiro)
	if projectile.has_method("setup_from_weapon_data"):
		projectile.call_deferred("setup_from_weapon_data", weapon_data, direction)
	else:
		push_error("[RANGED] ‚ö†Ô∏è Proj√©til n√£o tem m√©todo setup_from_weapon_data()!")
	
	return projectile


func get_spawn_position() -> Vector2:
	"""Retorna a posi√ß√£o de spawn do proj√©til"""
	if spawn_marker:
		return spawn_marker.global_position
	
	# Fallback para posi√ß√£o do componente
	return global_position


func setup(marker: Marker2D, data: Resource, scene: PackedScene = null) -> void:
	"""Configura o componente com refer√™ncias externas"""
	spawn_marker = marker
	weapon_data = data
	
	if scene:
		projectile_scene = scene
	elif not projectile_scene:
		# Carrega cena padr√£o
		projectile_scene = preload("res://scenes/projectiles/projectile.tscn")
	
	print("[RANGED] üèπ Componente configurado")
	if weapon_data:
		print("[RANGED]    Arma: %s" % weapon_data.item_name)
		if "projectile_speed" in weapon_data:
			print("[RANGED]    Velocidade: %.1f" % weapon_data.projectile_speed)
		if "damage" in weapon_data:
			print("[RANGED]    Dano: %.1f" % weapon_data.damage)
